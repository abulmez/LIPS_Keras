#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.23a
#  in conjunction with Tcl version 8.6
#    Jun 23, 2019 12:09:20 PM EEST  platform: Windows NT
import ctypes
import threading

from src.service.Inverse_problem_solver import InverseProblemSolver
from src.ui import LIPS_New_Model_UI_support

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

top_level = None
canvas_array = []


def fill_entries_with_default_data():
    top_level.training_data_folder_name_entry.insert(0, "blurred_pics")
    top_level.training_epochs_entry.insert(0, "50")
    top_level.z_size_entry.insert(0, "512")


def create_canvas_array():
    global canvas_array
    canvas_array = [[
        top_level.recovered_image_1_canvas,
        top_level.recovered_image_2_canvas,
        top_level.recovered_image_3_canvas,
        top_level.recovered_image_4_canvas
    ], [
        top_level.input_image_1_canvas,
        top_level.input_image_2_canvas,
        top_level.input_image_3_canvas,
        top_level.input_image_4_canvas
    ], [
        top_level.predicted_filter_1_canvas,
        top_level.predicted_filter_2_canvas,
        top_level.predicted_filter_3_canvas,
        top_level.predicted_filter_4_canvas
    ]]


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root, top_level
    root = tk.Tk()
    top = NewModelWindow(root)
    LIPS_New_Model_UI_support.init(root, top)
    top_level = top
    fill_entries_with_default_data()
    create_canvas_array()
    root.mainloop()


w = None


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    top = NewModelWindow(w)
    LIPS_New_Model_UI_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class NewModelWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        top.geometry("1132x538+-2019+479")
        top.title("Train new model")
        top.configure(background="#d9d9d9")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.022, rely=0.093, height=26, width=190)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Generator backup file name''')
        self.Label1.configure(width=212)

        self.generator_backup_file_name_entry = tk.Entry(top)
        self.generator_backup_file_name_entry.place(relx=0.035, rely=0.13
                                                    , height=24, relwidth=0.207)
        self.generator_backup_file_name_entry.configure(background="white")
        self.generator_backup_file_name_entry.configure(disabledforeground="#a3a3a3")
        self.generator_backup_file_name_entry.configure(font="TkFixedFont")
        self.generator_backup_file_name_entry.configure(foreground="#000000")
        self.generator_backup_file_name_entry.configure(insertbackground="black")
        self.generator_backup_file_name_entry.configure(width=234)

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.020, rely=0.204, height=26, width=180)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Training data folder name''')
        self.Label2.configure(width=192)

        self.training_data_folder_name_entry = tk.Entry(top)
        self.training_data_folder_name_entry.place(relx=0.035, rely=0.242
                                                   , height=24, relwidth=0.207)
        self.training_data_folder_name_entry.configure(background="white")
        self.training_data_folder_name_entry.configure(disabledforeground="#a3a3a3")
        self.training_data_folder_name_entry.configure(font="TkFixedFont")
        self.training_data_folder_name_entry.configure(foreground="#000000")
        self.training_data_folder_name_entry.configure(insertbackground="black")
        self.training_data_folder_name_entry.configure(width=234)

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.032, rely=0.297, height=26, width=100)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''Training epochs''')

        self.training_epochs_entry = tk.Entry(top)
        self.training_epochs_entry.place(relx=0.035, rely=0.335, height=24
                                         , relwidth=0.207)
        self.training_epochs_entry.configure(background="white")
        self.training_epochs_entry.configure(disabledforeground="#a3a3a3")
        self.training_epochs_entry.configure(font="TkFixedFont")
        self.training_epochs_entry.configure(foreground="#000000")
        self.training_epochs_entry.configure(insertbackground="black")
        self.training_epochs_entry.configure(width=234)

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.035, rely=0.39, height=26, width=46)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''Z-size''')

        self.z_size_entry = tk.Entry(top)
        self.z_size_entry.place(relx=0.035, rely=0.428, height=24
                                , relwidth=0.207)
        self.z_size_entry.configure(background="white")
        self.z_size_entry.configure(disabledforeground="#a3a3a3")
        self.z_size_entry.configure(font="TkFixedFont")
        self.z_size_entry.configure(foreground="#000000")
        self.z_size_entry.configure(insertbackground="black")
        self.z_size_entry.configure(width=234)

        self.start_button = tk.Button(top, command=start_training_callback)
        self.start_button.place(relx=0.053, rely=0.558, height=43, width=206)
        self.start_button.configure(activebackground="#ececec")
        self.start_button.configure(activeforeground="#000000")
        self.start_button.configure(background="#d9d9d9")
        self.start_button.configure(disabledforeground="#a3a3a3")
        self.start_button.configure(foreground="#000000")
        self.start_button.configure(highlightbackground="#d9d9d9")
        self.start_button.configure(highlightcolor="black")
        self.start_button.configure(pady="0")
        self.start_button.configure(text='''Start''')
        self.start_button.configure(width=206)

        self.console_text_box = tk.Text(top)
        self.console_text_box.place(relx=0.035, rely=0.688, relheight=0.212
                                    , relwidth=0.216)
        self.console_text_box.configure(background="white")
        self.console_text_box.configure(font="TkTextFont")
        self.console_text_box.configure(foreground="black")
        self.console_text_box.configure(highlightbackground="#d9d9d9")
        self.console_text_box.configure(highlightcolor="black")
        self.console_text_box.configure(insertbackground="black")
        self.console_text_box.configure(selectbackground="#c4c4c4")
        self.console_text_box.configure(selectforeground="black")
        self.console_text_box.configure(width=244)
        self.console_text_box.configure(wrap="word")

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.309, rely=0.13, height=26, width=120)
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(text='''Recoverd images''')

        self.Label6 = tk.Label(top)
        self.Label6.place(relx=0.309, rely=0.167, height=26, width=122)
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(text='''(random sample)''')
        self.Label6.configure(width=122)

        self.recovered_image_1_canvas = tk.Canvas(top)
        self.recovered_image_1_canvas.place(relx=0.433, rely=0.13
                                            , relheight=0.238, relwidth=0.113)
        self.recovered_image_1_canvas.configure(background="#d9d9d9")
        self.recovered_image_1_canvas.configure(borderwidth="2")
        self.recovered_image_1_canvas.configure(highlightbackground="#d9d9d9")
        self.recovered_image_1_canvas.configure(highlightcolor="black")
        self.recovered_image_1_canvas.configure(insertbackground="black")
        self.recovered_image_1_canvas.configure(relief="ridge")
        self.recovered_image_1_canvas.configure(selectbackground="#c4c4c4")
        self.recovered_image_1_canvas.configure(selectforeground="black")
        self.recovered_image_1_canvas.configure(width=125)

        self.recovered_image_2_canvas = tk.Canvas(top)
        self.recovered_image_2_canvas.place(relx=0.574, rely=0.13
                                            , relheight=0.238, relwidth=0.113)
        self.recovered_image_2_canvas.configure(background="#d9d9d9")
        self.recovered_image_2_canvas.configure(borderwidth="2")
        self.recovered_image_2_canvas.configure(highlightbackground="#d9d9d9")
        self.recovered_image_2_canvas.configure(highlightcolor="black")
        self.recovered_image_2_canvas.configure(insertbackground="black")
        self.recovered_image_2_canvas.configure(relief="ridge")
        self.recovered_image_2_canvas.configure(selectbackground="#c4c4c4")
        self.recovered_image_2_canvas.configure(selectforeground="black")
        self.recovered_image_2_canvas.configure(width=125)

        self.recovered_image_3_canvas = tk.Canvas(top)
        self.recovered_image_3_canvas.place(relx=0.707, rely=0.13
                                            , relheight=0.238, relwidth=0.113)
        self.recovered_image_3_canvas.configure(background="#d9d9d9")
        self.recovered_image_3_canvas.configure(borderwidth="2")
        self.recovered_image_3_canvas.configure(highlightbackground="#d9d9d9")
        self.recovered_image_3_canvas.configure(highlightcolor="black")
        self.recovered_image_3_canvas.configure(insertbackground="black")
        self.recovered_image_3_canvas.configure(relief="ridge")
        self.recovered_image_3_canvas.configure(selectbackground="#c4c4c4")
        self.recovered_image_3_canvas.configure(selectforeground="black")
        self.recovered_image_3_canvas.configure(width=125)

        self.recovered_image_4_canvas = tk.Canvas(top)
        self.recovered_image_4_canvas.place(relx=0.839, rely=0.13
                                            , relheight=0.238, relwidth=0.113)
        self.recovered_image_4_canvas.configure(background="#d9d9d9")
        self.recovered_image_4_canvas.configure(borderwidth="2")
        self.recovered_image_4_canvas.configure(highlightbackground="#d9d9d9")
        self.recovered_image_4_canvas.configure(highlightcolor="black")
        self.recovered_image_4_canvas.configure(insertbackground="black")
        self.recovered_image_4_canvas.configure(relief="ridge")
        self.recovered_image_4_canvas.configure(selectbackground="#c4c4c4")
        self.recovered_image_4_canvas.configure(selectforeground="black")
        self.recovered_image_4_canvas.configure(width=125)

        self.Label7 = tk.Label(top)
        self.Label7.place(relx=0.318, rely=0.409, height=26, width=86)
        self.Label7.configure(background="#d9d9d9")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(text='''Input image''')

        self.input_image_1_canvas = tk.Canvas(top)
        self.input_image_1_canvas.place(relx=0.433, rely=0.409, relheight=0.238
                                        , relwidth=0.113)
        self.input_image_1_canvas.configure(background="#d9d9d9")
        self.input_image_1_canvas.configure(borderwidth="2")
        self.input_image_1_canvas.configure(highlightbackground="#d9d9d9")
        self.input_image_1_canvas.configure(highlightcolor="black")
        self.input_image_1_canvas.configure(insertbackground="black")
        self.input_image_1_canvas.configure(relief="ridge")
        self.input_image_1_canvas.configure(selectbackground="#c4c4c4")
        self.input_image_1_canvas.configure(selectforeground="black")
        self.input_image_1_canvas.configure(width=125)

        self.input_image_2_canvas = tk.Canvas(top)
        self.input_image_2_canvas.place(relx=0.574, rely=0.409, relheight=0.238
                                        , relwidth=0.113)
        self.input_image_2_canvas.configure(background="#d9d9d9")
        self.input_image_2_canvas.configure(borderwidth="2")
        self.input_image_2_canvas.configure(highlightbackground="#d9d9d9")
        self.input_image_2_canvas.configure(highlightcolor="black")
        self.input_image_2_canvas.configure(insertbackground="black")
        self.input_image_2_canvas.configure(relief="ridge")
        self.input_image_2_canvas.configure(selectbackground="#c4c4c4")
        self.input_image_2_canvas.configure(selectforeground="black")
        self.input_image_2_canvas.configure(width=125)

        self.input_image_3_canvas = tk.Canvas(top)
        self.input_image_3_canvas.place(relx=0.707, rely=0.409, relheight=0.238
                                        , relwidth=0.113)
        self.input_image_3_canvas.configure(background="#d9d9d9")
        self.input_image_3_canvas.configure(borderwidth="2")
        self.input_image_3_canvas.configure(highlightbackground="#d9d9d9")
        self.input_image_3_canvas.configure(highlightcolor="black")
        self.input_image_3_canvas.configure(insertbackground="black")
        self.input_image_3_canvas.configure(relief="ridge")
        self.input_image_3_canvas.configure(selectbackground="#c4c4c4")
        self.input_image_3_canvas.configure(selectforeground="black")
        self.input_image_3_canvas.configure(width=125)

        self.input_image_4_canvas = tk.Canvas(top)
        self.input_image_4_canvas.place(relx=0.839, rely=0.409, relheight=0.238
                                        , relwidth=0.113)
        self.input_image_4_canvas.configure(background="#d9d9d9")
        self.input_image_4_canvas.configure(borderwidth="2")
        self.input_image_4_canvas.configure(highlightbackground="#d9d9d9")
        self.input_image_4_canvas.configure(highlightcolor="black")
        self.input_image_4_canvas.configure(insertbackground="black")
        self.input_image_4_canvas.configure(relief="ridge")
        self.input_image_4_canvas.configure(selectbackground="#c4c4c4")
        self.input_image_4_canvas.configure(selectforeground="black")
        self.input_image_4_canvas.configure(width=125)

        self.predicted_filter_1_canvas = tk.Canvas(top)
        self.predicted_filter_1_canvas.place(relx=0.433, rely=0.688
                                             , relheight=0.238, relwidth=0.113)
        self.predicted_filter_1_canvas.configure(background="#d9d9d9")
        self.predicted_filter_1_canvas.configure(borderwidth="2")
        self.predicted_filter_1_canvas.configure(highlightbackground="#d9d9d9")
        self.predicted_filter_1_canvas.configure(highlightcolor="black")
        self.predicted_filter_1_canvas.configure(insertbackground="black")
        self.predicted_filter_1_canvas.configure(relief="ridge")
        self.predicted_filter_1_canvas.configure(selectbackground="#c4c4c4")
        self.predicted_filter_1_canvas.configure(selectforeground="black")
        self.predicted_filter_1_canvas.configure(width=125)

        self.predicted_filter_2_canvas = tk.Canvas(top)
        self.predicted_filter_2_canvas.place(relx=0.574, rely=0.688
                                             , relheight=0.238, relwidth=0.113)
        self.predicted_filter_2_canvas.configure(background="#d9d9d9")
        self.predicted_filter_2_canvas.configure(borderwidth="2")
        self.predicted_filter_2_canvas.configure(highlightbackground="#d9d9d9")
        self.predicted_filter_2_canvas.configure(highlightcolor="black")
        self.predicted_filter_2_canvas.configure(insertbackground="black")
        self.predicted_filter_2_canvas.configure(relief="ridge")
        self.predicted_filter_2_canvas.configure(selectbackground="#c4c4c4")
        self.predicted_filter_2_canvas.configure(selectforeground="black")
        self.predicted_filter_2_canvas.configure(width=125)

        self.predicted_filter_3_canvas = tk.Canvas(top)
        self.predicted_filter_3_canvas.place(relx=0.707, rely=0.688
                                             , relheight=0.238, relwidth=0.113)
        self.predicted_filter_3_canvas.configure(background="#d9d9d9")
        self.predicted_filter_3_canvas.configure(borderwidth="2")
        self.predicted_filter_3_canvas.configure(highlightbackground="#d9d9d9")
        self.predicted_filter_3_canvas.configure(highlightcolor="black")
        self.predicted_filter_3_canvas.configure(insertbackground="black")
        self.predicted_filter_3_canvas.configure(relief="ridge")
        self.predicted_filter_3_canvas.configure(selectbackground="#c4c4c4")
        self.predicted_filter_3_canvas.configure(selectforeground="black")
        self.predicted_filter_3_canvas.configure(width=125)

        self.predicted_filter_4_canvas = tk.Canvas(top)
        self.predicted_filter_4_canvas.place(relx=0.839, rely=0.688
                                             , relheight=0.238, relwidth=0.113)
        self.predicted_filter_4_canvas.configure(background="#d9d9d9")
        self.predicted_filter_4_canvas.configure(borderwidth="2")
        self.predicted_filter_4_canvas.configure(highlightbackground="#d9d9d9")
        self.predicted_filter_4_canvas.configure(highlightcolor="black")
        self.predicted_filter_4_canvas.configure(insertbackground="black")
        self.predicted_filter_4_canvas.configure(relief="ridge")
        self.predicted_filter_4_canvas.configure(selectbackground="#c4c4c4")
        self.predicted_filter_4_canvas.configure(selectforeground="black")
        self.predicted_filter_4_canvas.configure(width=125)

        self.Label8 = tk.Label(top)
        self.Label8.place(relx=0.318, rely=0.688, height=26, width=104)
        self.Label8.configure(background="#d9d9d9")
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(text='''Predicted filter''')

        self.Label9 = tk.Label(top)
        self.Label9.place(relx=0.3, rely=0.725, height=26, width=149)
        self.Label9.configure(background="#d9d9d9")
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(text='''(on recovered image)''')


class LIPSNewModelTrainerThread(threading.Thread):
    def __init__(self, ui):
        threading.Thread.__init__(self)
        self.ui = ui
        self.InverseProblemSolver = None

    def run(self):
        self.InverseProblemSolver = InverseProblemSolver(self.ui.generator_backup_file_name_entry.get(),
                                                         self.ui.training_data_folder_name_entry.get(),
                                                         int(self.ui.training_epochs_entry.get()),
                                                         canvas_array, self.ui.console_text_box,
                                                         noise_vector_size=int(self.ui.z_size_entry.get()))
        self.InverseProblemSolver.train()

    def get_id(self):

        # returns id of the respective thread
        if hasattr(self, '_thread_id'):
            return self._thread_id
        for id, thread in threading._active.items():
            if thread is self:
                return id

    def raise_exception(self):
        thread_id = self.get_id()
        res = ctypes.pythonapi.PyThreadState_SetAsyncExc(thread_id,
                                                         ctypes.py_object(SystemExit))
        if res > 1:
            ctypes.pythonapi.PyThreadState_SetAsyncExc(thread_id, 0)
            print('Exception raise failure')


started = False
working_thread = None


def start_training_callback():
    global working_thread, started
    if started:
        # working_thread.raise_exception()
        working_thread.raise_exception()
        working_thread.join()
        started = False
        top_level.start_button.configure(text="Start")
    else:
        started = True
        working_thread = LIPSNewModelTrainerThread(top_level)
        working_thread.start()
        top_level.start_button.configure(text="Stop")


if __name__ == '__main__':
    vp_start_gui()
