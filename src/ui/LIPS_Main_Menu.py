#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.23a
#  in conjunction with Tcl version 8.6
#    Jun 23, 2019 12:32:16 PM EEST  platform: Windows NT

import sys

from src.ui import LIPS_Main_Menu_support, LIPS_New_Model_UI, LIPS_Existing_Model_UI

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = MainMenuWindow(root)
    LIPS_Main_Menu_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    top = MainMenuWindow(w)
    LIPS_Main_Menu_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class MainMenuWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        top.geometry("279x336+-1626+572")
        top.title("Main menu")
        top.configure(background="#d9d9d9")

        self.train_new_model_button = tk.Button(top, command=train_new_model_callback)
        self.train_new_model_button.place(relx=0.143, rely=0.238, height=53
                                          , width=206)
        self.train_new_model_button.configure(activebackground="#ececec")
        self.train_new_model_button.configure(activeforeground="#000000")
        self.train_new_model_button.configure(background="#d9d9d9")
        self.train_new_model_button.configure(disabledforeground="#a3a3a3")
        self.train_new_model_button.configure(foreground="#000000")
        self.train_new_model_button.configure(highlightbackground="#d9d9d9")
        self.train_new_model_button.configure(highlightcolor="black")
        self.train_new_model_button.configure(pady="0")
        self.train_new_model_button.configure(text='''Train new model''')
        self.train_new_model_button.configure(width=206)

        self.recover_using_existing_model_button = tk.Button(top, command=recover_using_existing_model_callback)
        self.recover_using_existing_model_button.place(relx=0.143, rely=0.565
                                                       , height=53, width=206)
        self.recover_using_existing_model_button.configure(activebackground="#ececec")
        self.recover_using_existing_model_button.configure(activeforeground="#000000")
        self.recover_using_existing_model_button.configure(background="#d9d9d9")
        self.recover_using_existing_model_button.configure(disabledforeground="#a3a3a3")
        self.recover_using_existing_model_button.configure(foreground="#000000")
        self.recover_using_existing_model_button.configure(highlightbackground="#d9d9d9")
        self.recover_using_existing_model_button.configure(highlightcolor="black")
        self.recover_using_existing_model_button.configure(pady="0")
        self.recover_using_existing_model_button.configure(text='''Recover using existing model''')
        self.recover_using_existing_model_button.configure(width=206)


def train_new_model_callback():
    root.destroy()
    LIPS_New_Model_UI.vp_start_gui()


def recover_using_existing_model_callback():
    root.destroy()
    LIPS_Existing_Model_UI.vp_start_gui()

if __name__ == '__main__':
    vp_start_gui()
